{
    "manifests": {
        "shopware/fastly-meta": {
            "manifest": {
                "copy-from-recipe": {
                    "config/": "%CONFIG_DIR%/",
                    "bin/": "%BIN_DIR%/"
                },
                "env": {
                    "FASTLY_API_TOKEN": "EXAMPLE_TOKEN",
                    "FASTLY_SERVICE_ID": "EXAMPLE_SERVICE"
                },
                "post-install-output": [
                    "  * Add your <comment>FASTLY_API_TOKEN</comment> and <comment>FASTLY_SERVICE_ID</comment> into <comment>.env</comment>",
                    "  * Run <comment>setup-fastly.sh</comment> to deploy the Fastly vcl files"
                ]
            },
            "files": {
                "bin/setup-fastly.sh": {
                    "contents": [
                        "#!/usr/bin/env bash",
                        "",
                        "# fail on error",
                        "set -e",
                        "",
                        "if [[ -z \"$FASTLY_API_TOKEN\" ]]; then",
                        "  echo \"Environment variable FASTLY_API_TOKEN is not set. Skipping\"",
                        "  exit 0",
                        "fi",
                        "",
                        "if [[ -z \"$FASTLY_SERVICE_ID\" ]]; then",
                        "  echo \"Environment variable FASTLY_SERVICE_ID is not set. Skipping\"",
                        "  exit 0",
                        "fi",
                        "",
                        "created_version=0",
                        "",
                        "create_version_if_not_done() {",
                        "    if [[ \"$created_version\" == \"1\" ]]; then",
                        "        return",
                        "    fi",
                        "",
                        "    echo \"Creating version from active version\"",
                        "    fastly service-version clone --version=active",
                        "    created_version=1",
                        "}",
                        "",
                        "get_md5()",
                        "{",
                        "  if builtin command -v md5 > /dev/null; then",
                        "    echo \"$1\" | md5",
                        "  elif builtin command -v md5sum > /dev/null ; then",
                        "    echo \"$1\" | md5sum | awk '{print $1}'",
                        "  else",
                        "    echo \"Neither md5 nor md5sum were found in the PATH\"",
                        "    return 1",
                        "  fi",
                        "",
                        "  return 0",
                        "}",
                        "",
                        "install_fastly_cli() {",
                        "    if [[ -d \"/tmp/fastly\" ]]; then",
                        "      export PATH=\"/tmp/fastly:$PATH\"",
                        "      return",
                        "    fi",
                        "",
                        "    mkdir /tmp/fastly",
                        "",
                        "    arch=$(uname -m)",
                        "    os=\"linux\"",
                        "",
                        "    if [[ \"$arch\" == \"x86_64\" ]]; then",
                        "        arch=\"amd64\"",
                        "    fi",
                        "",
                        "    if [[ \"$OSTYPE\" == \"darwin\"* ]]; then",
                        "        os=\"darwin\"",
                        "    fi",
                        "",
                        "    echo \"Detected OS: ${os} and architecture: ${arch}\"",
                        "",
                        "    file=\"https://github.com/fastly/cli/releases/download/v2.0.0/fastly_v2.0.0_${os}-${arch}.tar.gz\"",
                        "",
                        "    echo \"Downloading ${file}\"",
                        "",
                        "    curl -L \"${file}\" | tar xz -C /tmp/fastly/",
                        "    export PATH=\"/tmp/fastly:$PATH\"",
                        "}",
                        "",
                        "install_fastly_cli",
                        "",
                        "# Fastly tries to write into /app on platformsh and this throws an error",
                        "export HOME=/tmp",
                        "",
                        "for vcl in ./config/fastly/*.vcl; do",
                        "    trigger=$(basename $vcl .vcl)",
                        "    name=\"shopware_${trigger}\"",
                        "",
                        "    if fastly vcl snippet describe --version=latest \"--name=$name\" > /dev/null; then",
                        "        # The snippet exists on remote",
                        "        localContent=$(cat \"$vcl\")",
                        "        localContentMd5=$(get_md5 \"$localContent\")",
                        "",
                        "        remoteContent=$(fastly vcl snippet describe --version=latest \"--name=$name\" --json | jq -r '.Content')",
                        "        remoteContentMd5=$(get_md5 \"$remoteContent\")",
                        "",
                        "        if [[ \"$localContentMd5\" != \"$remoteContentMd5\" ]]; then",
                        "            echo \"Snippet ${trigger} has changed. Updating\"",
                        "",
                        "            create_version_if_not_done",
                        "",
                        "            fastly vcl snippet update \"--name=shopware_${trigger}\" \"--content=${vcl}\" \"--type=${trigger}\" --version=latest",
                        "        else",
                        "            echo \"Snippet ${trigger} is up to date\"",
                        "        fi",
                        "    else",
                        "        create_version_if_not_done",
                        "",
                        "        fastly vcl snippet create \"--name=shopware_${trigger}\" \"--content=${vcl}\" \"--type=${trigger}\" --version=latest",
                        "    fi",
                        "done",
                        "",
                        "if [[ \"$created_version\" == \"1\" ]]; then",
                        "    echo \"Activating latest version\"",
                        "",
                        "    fastly service-version activate --version latest",
                        "fi",
                        ""
                    ],
                    "executable": false
                },
                "config/fastly/deliver.vcl": {
                    "contents": [
                        "# Remove the exact PHP Version from the response for more security (e.g. 404 pages)",
                        "unset resp.http.x-powered-by;",
                        "",
                        "# We use fastly.ff.visits_this_service to avoid running this logic on shield nodes. We only need to",
                        "# run it on edge nodes",
                        "if (fastly.ff.visits_this_service == 0 && resp.http.sw-invalidation-states) {",
                        "  # invalidation headers are only for internal use",
                        "  unset resp.http.sw-invalidation-states;",
                        "",
                        "  ## we don't want the client to cache",
                        "  set resp.http.Cache-Control = \"max-age=0, private\";",
                        "}"
                    ],
                    "executable": false
                },
                "config/fastly/fetch.vcl": {
                    "contents": [
                        "# remove set cookie headers to make responses cachable",
                        "if (beresp.http.cache-control ~ \"public\") {",
                        "  unset beresp.http.set-cookie;",
                        "",
                        "  return (deliver);",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "config/fastly/hash.vcl": {
                    "contents": [
                        "# Consider Shopware http cache cookies",
                        "if (req.http.cookie:sw-cache-hash) {",
                        "  set req.hash += req.http.cookie:sw-cache-hash;",
                        "} elseif (req.http.cookie:sw-currency) {",
                        "  set req.hash += req.http.cookie:sw-currency;",
                        "}"
                    ],
                    "executable": false
                },
                "config/fastly/hit.vcl": {
                    "contents": [
                        "if (req.http.cookie:sw-states) {",
                        "   set req.http.states = req.http.cookie:sw-states;",
                        "",
                        "   if (req.http.states ~ \"logged-in\" && obj.http.sw-invalidation-states ~ \"logged-in\" ) {",
                        "      return (pass);",
                        "   }",
                        "",
                        "   if (req.http.states ~ \"cart-filled\" && obj.http.sw-invalidation-states ~ \"cart-filled\" ) {",
                        "      return (pass);",
                        "   }",
                        "}"
                    ],
                    "executable": false
                },
                "config/fastly/recv.vcl": {
                    "contents": [
                        "# Enable Fastly authentification for single purges",
                        "set req.http.Fastly-Purge-Requires-Auth = \"1\";",
                        "",
                        "# Mitigate httpoxy application vulnerability, see: https://httpoxy.org/",
                        "unset req.http.Proxy;",
                        "",
                        "# Strip query strings only needed by browser javascript. Customize to used tags.",
                        "if (req.url != req.url.path) {",
                        "  set req.url = querystring.filter(req.url,",
                        "    \"pk_campaign\" + querystring.filtersep() +",
                        "    \"piwik_campaign\" + querystring.filtersep() +",
                        "    \"pk_kwd\" + querystring.filtersep() +",
                        "    \"piwik_kwd\" + querystring.filtersep() +",
                        "    \"pk_keyword\" + querystring.filtersep() +",
                        "    \"pixelId\" + querystring.filtersep() +",
                        "    \"kwid\" + querystring.filtersep() +",
                        "    \"kw\" + querystring.filtersep() +",
                        "    \"adid\" + querystring.filtersep() +",
                        "    \"chl\" + querystring.filtersep() +",
                        "    \"dv\" + querystring.filtersep() +",
                        "    \"nk\" + querystring.filtersep() +",
                        "    \"pa\" + querystring.filtersep() +",
                        "    \"camid\" + querystring.filtersep() +",
                        "    \"adgid\" + querystring.filtersep() +",
                        "    \"cx\" + querystring.filtersep() +",
                        "    \"ie\" + querystring.filtersep() +",
                        "    \"cof\" + querystring.filtersep() +",
                        "    \"siteurl\" + querystring.filtersep() +",
                        "    \"utm_source\" + querystring.filtersep() +",
                        "    \"utm_medium\" + querystring.filtersep() +",
                        "    \"utm_campaign\" + querystring.filtersep() +",
                        "    \"_ga\" + querystring.filtersep() +",
                        "    \"gclid\"",
                        "    );",
                        "}",
                        "",
                        "# Normalize query arguments",
                        "set req.url = querystring.sort(req.url);",
                        "",
                        "# Make sure that the client ip is forward to the client.",
                        "if (req.http.x-forwarded-for) {",
                        "    set req.http.X-Forwarded-For = req.http.X-Forwarded-For + \", \" + client.ip;",
                        "} else {",
                        "    set req.http.X-Forwarded-For = client.ip;",
                        "}",
                        "",
                        "# Don't cache Authenticate & Authorization",
                        "if (req.http.Authenticate || req.http.Authorization) {",
                        "    return (pass);",
                        "}",
                        "",
                        "# Always pass these paths directly to php without caching",
                        "# Note: virtual URLs might bypass this rule (e.g. /en/checkout)",
                        "if (req.url.path ~ \"^/(checkout|account|admin|api|csrf)(/.*)?$\") {",
                        "    return (pass);",
                        "}"
                    ],
                    "executable": false
                },
                "config/packages/fastly.yaml": {
                    "contents": [
                        "storefront:",
                        "    csrf:",
                        "        mode: ajax",
                        "    # Uncomment all to enable soft purge",
                        "    # http_cache:",
                        "        # stale_while_revalidate: 300",
                        "        # stale_if_error: 3600",
                        "    reverse_proxy:",
                        "        enabled: true",
                        "        fastly:",
                        "            enabled: true",
                        "            api_key: '%env(FASTLY_API_TOKEN)%'",
                        "            service_id: '%env(FASTLY_SERVICE_ID)%'",
                        "            # Uncomment to enable soft purge",
                        "            # soft_purge: '1'"
                    ],
                    "executable": false
                }
            },
            "ref": "e09228c4ccb988e2f2cd0215d4e85d2ea27b8937"
        }
    }
}
